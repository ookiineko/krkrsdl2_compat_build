cmake_minimum_required(VERSION 3.12)

set(CMAKE_C_COMPILER "clang")
set(CMAKE_CXX_COMPILER "clang++")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")

project(krkrsdl2_env)

if (${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.13")
cmake_policy(SET CMP0077 NEW)
endif()
option(BUILTIN_PLUGIN_ENABLE_KAGPARSER "Enable the KAGParser plugin." ON)
option(BUILTIN_PLUGIN_ENABLE_EXTRANS "Enable the extrans plugin." ON)
option(BUILTIN_PLUGIN_ENABLE_WUTCWF "Enable the wutcwf plugin." ON)
option(BUILTIN_PLUGIN_ENABLE_WUVORBIS "Enable the wuvorbis plugin." ON)
option(BUILTIN_PLUGIN_ENABLE_FSTAT "Enable the fstat plugin." ON)
option(BUILTIN_PLUGIN_ENABLE_JSON "Enable the json plugin." ON)
option(BUILTIN_PLUGIN_ENABLE_VARFILE "Enable the varfile plugin." ON)
option(BUILTIN_PLUGIN_ENABLE_KRGLHWEBP "Enable the krglhwebp plugin." ON)

# Options can be passed to toe build system Kirikiri SDL2 using this method.
set(OPTION_ENABLE_EXTERNAL_PLUGINS OFF)

add_subdirectory(vendor/krkrsdl2)

# Plugins can be statically linked to Kirikiri SDL2 using this method.
set(NCBIND_SRC_DIR vendor/ncbind)
file(STRINGS ${NCBIND_SRC_DIR}/src_list/sources.txt NCBIND_SRC)
file(STRINGS ${NCBIND_SRC_DIR}/src_list/includes.txt NCBIND_INCLUDES)
list(TRANSFORM NCBIND_SRC PREPEND ${NCBIND_SRC_DIR}/)
list(TRANSFORM NCBIND_INCLUDES PREPEND ${NCBIND_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${NCBIND_SRC})
list(APPEND KRKRSDL2_EXTRA_INCLUDES ${NCBIND_INCLUDES})

if(${BUILTIN_PLUGIN_ENABLE_KAGPARSER})
set(KAGPARSER_SRC_DIR vendor/KAGParser)
file(STRINGS ${KAGPARSER_SRC_DIR}/src_list/sources.txt KAGPARSER_SRC)
list(TRANSFORM KAGPARSER_SRC PREPEND ${KAGPARSER_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${KAGPARSER_SRC})
endif()
if(${BUILTIN_PLUGIN_ENABLE_EXTRANS})
set(EXTRANS_SRC_DIR vendor/SamplePlugin/extrans)
file(STRINGS ${EXTRANS_SRC_DIR}/src_list/sources.txt EXTRANS_SRC)
list(TRANSFORM EXTRANS_SRC PREPEND ${EXTRANS_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${EXTRANS_SRC})
endif()
if(${BUILTIN_PLUGIN_ENABLE_WUTCWF})
set(WUTCWF_SRC_DIR vendor/SamplePlugin/wutcwf)
file(STRINGS ${WUTCWF_SRC_DIR}/src_list/sources.txt WUTCWF_SRC)
list(TRANSFORM WUTCWF_SRC PREPEND ${WUTCWF_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${WUTCWF_SRC})
endif()
if(${BUILTIN_PLUGIN_ENABLE_WUVORBIS})
set(WUVORBIS_SRC_DIR vendor/wuvorbis)
file(STRINGS ${WUVORBIS_SRC_DIR}/src_list/sources.txt WUVORBIS_SRC)
file(STRINGS ${WUVORBIS_SRC_DIR}/src_list/includes.txt WUVORBIS_INCLUDES)
list(TRANSFORM WUVORBIS_SRC PREPEND ${WUVORBIS_SRC_DIR}/)
list(TRANSFORM WUVORBIS_INCLUDES PREPEND ${WUVORBIS_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${WUVORBIS_SRC})
list(APPEND KRKRSDL2_EXTRA_INCLUDES ${WUVORBIS_INCLUDES})
endif()
if(${BUILTIN_PLUGIN_ENABLE_FSTAT})
set(FSTAT_SRC_DIR vendor/fstat)
file(STRINGS ${FSTAT_SRC_DIR}/src_list/sources.txt FSTAT_SRC)
list(TRANSFORM FSTAT_SRC PREPEND ${FSTAT_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${FSTAT_SRC})
endif()
if(${BUILTIN_PLUGIN_ENABLE_JSON})
set(JSON_SRC_DIR vendor/json)
file(STRINGS ${JSON_SRC_DIR}/src_list/sources.txt JSON_SRC)
list(TRANSFORM JSON_SRC PREPEND ${JSON_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${JSON_SRC})
endif()
if(${BUILTIN_PLUGIN_ENABLE_VARFILE})
set(VARFILE_SRC_DIR vendor/varfile)
file(STRINGS ${VARFILE_SRC_DIR}/src_list/sources.txt VARFILE_SRC)
list(TRANSFORM VARFILE_SRC PREPEND ${VARFILE_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${VARFILE_SRC})
endif()
if(${BUILTIN_PLUGIN_ENABLE_KRGLHWEBP})
set(KRGLHWEBP_SRC_DIR vendor/krglhwebp)
file(STRINGS ${KRGLHWEBP_SRC_DIR}/src_list/sources.txt KRGLHWEBP_SRC)
file(STRINGS ${KRGLHWEBP_SRC_DIR}/src_list/includes.txt KRGLHWEBP_INCLUDES)
list(TRANSFORM KRGLHWEBP_SRC PREPEND ${KRGLHWEBP_SRC_DIR}/)
list(TRANSFORM KRGLHWEBP_INCLUDES PREPEND ${KRGLHWEBP_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${KRGLHWEBP_SRC})
list(APPEND KRKRSDL2_EXTRA_INCLUDES ${KRGLHWEBP_INCLUDES})
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")
set(KREMSCRIPTEN_SRC_DIR vendor/kremscripten/src)
file(STRINGS ${KREMSCRIPTEN_SRC_DIR}/src_list/sources.txt KRGLHWEBP_SRC)
file(STRINGS ${KREMSCRIPTEN_SRC_DIR}/src_list/includes.txt KRGLHWEBP_INCLUDES)
list(TRANSFORM KREMSCRIPTEN_SRC PREPEND ${KREMSCRIPTEN_SRC_DIR}/)
list(APPEND KRKRSDL2_EXTRA_SRC ${KREMSCRIPTEN_SRC})
endif()

target_sources(${KRKRSDL2_NAME} PRIVATE ${KRKRSDL2_EXTRA_SRC})
target_include_directories(${KRKRSDL2_NAME} PUBLIC ${KRKRSDL2_EXTRA_INCLUDES})
